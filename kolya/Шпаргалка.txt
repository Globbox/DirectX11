//////////////////////////////////
// Adding the DirectX Libraries //
//////////////////////////////////
1. В обозревателе решения кликнуть правой кнопкой мыши по названию проекта(не по решению) -> Свойства
2. Переходим во вкладку компоновщик, наверху поменять конфигурацию в "Все конфигурации"
3. Компоновщик - Ввод - Дополнительные зависимости -> изменить и добавить такие файлы:
	d3d11.lib, d3dx11.lib, dxerr.lib
4. Теперь пути (могут и автоматически проставиться, у меня не проставляются так вот гайд)
5. Каталоги VC++ -> изменяем Включаемые каталоги и Каталоги библиотек
Включаемые каталоги: $(DXSDK_DIR)Include
Каталоги библиотек: $(DXSDK_DIR)Lib\x86
Всё


///////////////////////////
// Компоненты DirectX 11 //
///////////////////////////

Direct2D 			2d графика в win32 приложениях
DirectWrite 		шрифты и текст, отрисовываемый с Direct2D

DXGI 				Инфраструктура DirectX Graphics, также известная как DXGI, используется для создание цепочек подкачки Direct3D и перечисление адаптеров устройств.

Direct3D  			вся 3D графика (апи) в DirectX

XAudio2  			(низкоуровневый) замена DirectSound. Раньше была только для иксбокса как часть XDK (Xbox Development Kit), сейчас так же часть и DirectX SDK

XACT3 				(высокоуровневый) надстройка над XAudio2. Кроссплатформенный

XInput 				API для рабоыт с контроллерами (Xbox, клавиатура, мышь и т.д.). Заменил DirectInput

XNA MAth 			математическая библиотека с частовстречающимися мат. операциями

DirectCompute 		новое API, дающее мультипоточность используя GPU

DirectSetup 		чекает и обновляет directx версию пользователя

Windows Games Explorer 			не понял

DirectInput 		устарел - см. XInput


Удалённые и устаревшие компоненты
	DirectDraw
	DirectPlay
	DirectShow
	DirectMusic
	DirectSound
	THe Components Object Model




/////////////////////////////
// Этапы работы DirectX 11 //
/////////////////////////////

1. Input Assembler  			устанавливает геометрию, которую мы собираемся отрисовать
2. Vertex Shader 				вершинный шейдер, работает точками вершин. НА вход получает точку - выдаёт - точку.

3. Hull Shader   ----
4. Tessellator		| ---- новое в Direct3D 11
5. Domain Shader ----

								3 и 5: опциональные этапы
																	///////////////////////////////////////////////////////
																	// Определение тесселяции https://ru.wikipedia.org/wiki/Замощение_(компьютерная_графика)
																	// Замощение, тесселяция (англ. tessellation) (компьютерная графика) — автоматизированный процесс добавления новых выпуклых многоугольников в полигональную сетку с целью повышения детализации сетки. Короче tessellator - увеличивает или уменьшает (как захочешь) детализацию.
																	///////////////////////////////////////////////////
	
																	
								Описание этапов 3-5. Машинный перевод, так как ничего непонятно:
								Шейдер корпуса принимает свой вход от вывода вершинного шейдера, который
								работающих на контрольных точках и данных по сравнению с традиционными вершинами, и производит
								контрольные точки вывода для так называемых патчей. Стадия тесселяции,
								который появляется между шейдером корпуса и этапами шейдера домена, является этапом фиксированной функции, который выводит вывод из шейдера корпуса и подразделяет данные
								на аппаратном обеспечении. Шейдер домена отвечает за создание вершины
								разделенная точка

6. Geometry Shader - так же, опционален. Далее тоже машинный перевод:

								Шестой этап, геометрический шейдер (GS), также является опциональным шейдером. Если там есть
								не выполняется тесселяция, этап шейпинга геометрии происходит после вершины
								шейдерный этап. Геометрические шейдеры работают на целых формах, таких как треугольники, тогда как
								вершинный шейдер работает на одной точке фигуры. Геометрический шейдер имеет
								способность по существу создавать или уничтожать геометрию по мере необходимости, что во многом зависит от
								эффект, который вы пытаетесь создать. Одним из распространенных примеров геометрических шейдеров является
								генерируя геометрию затенения из модели, создавая так называемую
								теневой объем. Другим примером является генерация частиц, используемых для создания частиц
								таких как дождь или взрывы, принимая список точек, которые выступают в качестве центра
								частиц и генерации многоугольников вокруг них.

7. Rasterizer - решает, какие пискели будут видны

8. Pixel Shader - машинный перевод

								Восьмой этап - этап пиксельного шейдера (PS). На этапе пиксельного шейдера
								шейдер получает геометрические данные со всех предыдущих этапов и используется для затенения
								пиксели (иногда называемые фрагментами), которые содержат эту форму.
								вывод пиксельного шейдера - это единственное значение цвета, которое будет использоваться финальным
								чтобы создать окончательное изображение, отображаемое на экране. Если нет тесселяции
								или геометрические шейдеры, пиксельный шейдер получает свой вход от вершинного шейдера
								непосредственно. Вход в пиксельный шейдер представляет собой технически интерполированные данные, то есть,
								данные, которые генерируются между точками (вершинами) формы. 
9. Output Merger - собирает финальную картинку, которую нужно вывести на экран
